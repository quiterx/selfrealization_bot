import asyncio
import logging
import os
import random
import sys
from datetime import datetime
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import CommandStart
from dotenv import load_dotenv
from utils.database import init_db, create_user
from utils.motivation import init_motivation_db, get_random_motivation, get_random_nutrition_tip, get_random_fitness_tip
from utils.coach import init_coach_db, get_coach_answer
from utils.faq import init_faq_db, get_faq_list, get_faq_answer, add_user_question
from utils import calories, water, activity, weight, notes
from utils.reminders import Reminders

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
def setup_logging():
    log_dir = "logs"
    if not os.path.exists(log_dir):
        os.makedirs(log_dir)
    
    log_file = os.path.join(log_dir, f"bot_{datetime.now().strftime('%Y%m%d')}.log")
    
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
        handlers=[
            logging.FileHandler(log_file),
            logging.StreamHandler(sys.stdout)
        ]
    )
    
    return logging.getLogger(__name__)

logger = setup_logging()

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

API_TOKEN = os.getenv("BOT_TOKEN")
if not API_TOKEN:
    logger.error("BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
    sys.exit(1)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=API_TOKEN)
dp = Dispatcher()

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
main_menu = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üçΩ –ö–∞–ª–æ—Ä–∏–∏"), KeyboardButton(text="üíß –í–æ–¥–∞")],
        [KeyboardButton(text="üèÉ‚Äç‚ôÇÔ∏è –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å"), KeyboardButton(text="‚öñÔ∏è –í–µ—Å")],
        [KeyboardButton(text="üìÖ –ü–ª–∞–Ω—ã –∏ –º—ã—Å–ª–∏"), KeyboardButton(text="ü§ñ –°–æ–≤–µ—Ç –¥–Ω—è")],
        [KeyboardButton(text="‚ùì –í–æ–ø—Ä–æ—Å —Ç—Ä–µ–Ω–µ—Ä—É")],
    ],
    resize_keyboard=True
)

# –ö–Ω–æ–ø–∫–∏ –¥–ª—è —Ç—Ä–µ–∫–µ—Ä–∞ –∫–∞–ª–æ—Ä–∏–π
calories_menu = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="‚ûñ –í—ã—á–µ—Å—Ç—å –∫–∞–ª–æ—Ä–∏–∏"), KeyboardButton(text="üîÑ –°–±—Ä–æ—Å–∏—Ç—å –æ—Å—Ç–∞—Ç–æ–∫")],
        [KeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –ª–∏–º–∏—Ç"), KeyboardButton(text="üìä –ò—Å—Ç–æ—Ä–∏—è")],
        [KeyboardButton(text="‚¨ÖÔ∏è –í –º–µ–Ω—é")],
    ],
    resize_keyboard=True
)

# –ö–Ω–æ–ø–∫–∏ –¥–ª—è —Ç—Ä–µ–∫–µ—Ä–∞ –≤–æ–¥—ã
water_menu = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="‚ûñ –í—ã–ø–∏–ª –≤–æ–¥—ã"), KeyboardButton(text="üîÑ –°–±—Ä–æ—Å–∏—Ç—å –≤–æ–¥—É")],
        [KeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –ª–∏–º–∏—Ç –≤–æ–¥—ã"), KeyboardButton(text="üìä –ò—Å—Ç–æ—Ä–∏—è –≤–æ–¥—ã")],
        [KeyboardButton(text="‚¨ÖÔ∏è –í –º–µ–Ω—é")],
    ],
    resize_keyboard=True
)

# –ö–Ω–æ–ø–∫–∏ –¥–ª—è —Ç—Ä–µ–∫–µ—Ä–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
activity_menu = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —à–∞–≥–∏"), KeyboardButton(text="üèãÔ∏è‚Äç‚ôÇÔ∏è –û—Ç–º–µ—Ç–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É")],
        [KeyboardButton(text="üîÑ –°–±—Ä–æ—Å–∏—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å"), KeyboardButton(text="üìä –ò—Å—Ç–æ—Ä–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏")],
        [KeyboardButton(text="‚¨ÖÔ∏è –í –º–µ–Ω—é")],
    ],
    resize_keyboard=True
)

# –ö–Ω–æ–ø–∫–∏ –¥–ª—è —Ç—Ä–µ–∫–µ—Ä–∞ –≤–µ—Å–∞
weight_menu = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="‚ûï –í–≤–µ—Å—Ç–∏ –≤–µ—Å"), KeyboardButton(text="üîÑ –°–±—Ä–æ—Å–∏—Ç—å –≤–µ—Å")],
        [KeyboardButton(text="üìä –ò—Å—Ç–æ—Ä–∏—è –≤–µ—Å–∞")],
        [KeyboardButton(text="‚¨ÖÔ∏è –í –º–µ–Ω—é")],
    ],
    resize_keyboard=True
)

# –ö–Ω–æ–ø–∫–∏ –¥–ª—è —Ä–∞–∑–¥–µ–ª–∞ –ø–ª–∞–Ω–æ–≤ –∏ –º—ã—Å–ª–µ–π
notes_menu = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üìù –ó–∞–ø–∏—Å–∞—Ç—å –ø–ª–∞–Ω"), KeyboardButton(text="üí≠ –ó–∞–ø–∏—Å–∞—Ç—å –º—ã—Å–ª—å")],
        [KeyboardButton(text="üìã –°–µ–≥–æ–¥–Ω—è—à–Ω–∏–µ –∑–∞–ø–∏—Å–∏"), KeyboardButton(text="üìö –ò—Å—Ç–æ—Ä–∏—è –∑–∞–ø–∏—Å–µ–π")],
        [KeyboardButton(text="‚¨ÖÔ∏è –í –º–µ–Ω—é")],
    ],
    resize_keyboard=True
)

# –ö–Ω–æ–ø–∫–∏ –¥–ª—è —Ä–∞–∑–¥–µ–ª–∞ FAQ
faq_menu = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="‚ùì –ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã"), KeyboardButton(text="‚úçÔ∏è –ó–∞–¥–∞—Ç—å —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å")],
        [KeyboardButton(text="‚¨ÖÔ∏è –í –º–µ–Ω—é")],
    ],
    resize_keyboard=True
)

# –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
reminders = None

@dp.message(CommandStart())
async def cmd_start(message: types.Message):
    try:
        global reminders
        if not reminders:
            reminders = Reminders(bot)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        await init_db()
        await init_motivation_db()
        await init_coach_db()
        await init_faq_db()
        
        # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await create_user(
            user_id=message.from_user.id,
            username=message.from_user.username,
            first_name=message.from_user.first_name,
            last_name=message.from_user.last_name
        )
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
        reminders.set_user(message.from_user.id)
        await reminders.start()
        
        await message.answer(
            "–ü—Ä–∏–≤–µ—Ç! üëã\n\n–Ø —Ç–≤–æ–π –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è —Å–∞–º–æ—Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∏ –ø–æ—Ö—É–¥–µ–Ω–∏—è! –í–º–µ—Å—Ç–µ –º—ã —Å–º–æ–∂–µ–º –¥–æ—Å—Ç–∏—á—å —Ç–≤–æ–∏—Ö —Ü–µ–ª–µ–π: —Å–ª–µ–¥–∏—Ç—å –∑–∞ –∫–∞–ª–æ—Ä–∏—è–º–∏, –≤–æ–¥–æ–π, –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å—é –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –º–æ—Ç–∏–≤–∞—Ü–∏—é –∫–∞–∂–¥—ã–π –¥–µ–Ω—å! üí™\n\n–Ø –±—É–¥—É –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å —Ç–µ–±–µ –ø–∏—Ç—å –≤–æ–¥—É –∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –º–æ—Ç–∏–≤–∏—Ä—É—é—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è!\n\n–í—ã–±–µ—Ä–∏ —Ä–∞–∑–¥–µ–ª:",
            reply_markup=main_menu
        )
        logger.info(f"–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {message.from_user.id} ({message.from_user.username})")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ cmd_start: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@dp.message()
async def handle_menu(message: types.Message):
    try:
        text = message.text
        user_id = message.from_user.id
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–ø—Ä–∞–≤–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ: {text}")
        
        if text == "ü§ñ –°–æ–≤–µ—Ç –¥–Ω—è":
            tip = await get_random_nutrition_tip() if random.choice([True, False]) else await get_random_fitness_tip()
            await message.answer(f"–°–æ–≤–µ—Ç –¥–Ω—è: {tip}")
        elif text == "‚ùì –í–æ–ø—Ä–æ—Å —Ç—Ä–µ–Ω–µ—Ä—É":
            await message.answer(
                "–¢—ã –º–æ–∂–µ—à—å –≤—ã–±—Ä–∞—Ç—å —á–∞—Å—Ç—ã–π –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –∑–∞–¥–∞—Ç—å —Å–≤–æ–π!",
                reply_markup=faq_menu
            )
        elif text == "üìÖ –ü–ª–∞–Ω—ã –∏ –º—ã—Å–ª–∏":
            await message.answer(
                "–ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å —Å–≤–æ–∏ –ø–ª–∞–Ω—ã –∏ –º—ã—Å–ª–∏. –≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –∏ –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ–π –ø—É—Ç—å!",
                reply_markup=notes_menu
            )
        elif text == "üçΩ –ö–∞–ª–æ—Ä–∏–∏":
            today = await calories.get_today(user_id)
            await message.answer(
                f"üçΩ –¢—Ä–µ–∫–µ—Ä –∫–∞–ª–æ—Ä–∏–π\n\n–õ–∏–º–∏—Ç: {today['limit']} –∫–∫–∞–ª\n–û—Å—Ç–∞–ª–æ—Å—å: {today['left']} –∫–∫–∞–ª\n\n–ß—Ç–æ —Å–¥–µ–ª–∞—Ç—å?",
                reply_markup=calories_menu
            )
        elif text == "ÔøΩÔøΩ –í–æ–¥–∞":
            today = await water.get_today(user_id)
            await message.answer(
                f"üíß –¢—Ä–µ–∫–µ—Ä –≤–æ–¥—ã\n\n–õ–∏–º–∏—Ç: {today['limit']} –º–ª\n–û—Å—Ç–∞–ª–æ—Å—å: {today['left']} –º–ª\n\n–ß—Ç–æ —Å–¥–µ–ª–∞—Ç—å?",
                reply_markup=water_menu
            )
        elif text == "üèÉ‚Äç‚ôÇÔ∏è –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å":
            today = await activity.get_today(user_id)
            workout = "‚úÖ" if today['workout'] else "‚ùå"
            await message.answer(
                f"üèÉ‚Äç‚ôÇÔ∏è –¢—Ä–µ–∫–µ—Ä –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏\n\n–®–∞–≥–∏: {today['steps']}\n–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞: {workout}\n\n–ß—Ç–æ —Å–¥–µ–ª–∞—Ç—å?",
                reply_markup=activity_menu
            )
        elif text == "‚öñÔ∏è –í–µ—Å":
            today = await weight.get_today(user_id)
            msg = f"‚öñÔ∏è –¢—Ä–µ–∫–µ—Ä –≤–µ—Å–∞\n\n–¢–µ–∫—É—â–∏–π –≤–µ—Å: {today if today else '–Ω–µ –≤–≤–µ–¥—ë–Ω'} –∫–≥\n\n–ß—Ç–æ —Å–¥–µ–ª–∞—Ç—å?"
            await message.answer(msg, reply_markup=weight_menu)
        elif text == "‚ûñ –í—ã—á–µ—Å—Ç—å –∫–∞–ª–æ—Ä–∏–∏":
            await message.answer("–°–∫–æ–ª—å–∫–æ –∫–∞–ª–æ—Ä–∏–π –≤—ã—á–µ—Å—Ç—å? –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ:", reply_markup=ReplyKeyboardRemove())
            dp.fsm_state = "subtract_calories"
        elif text == "üîÑ –°–±—Ä–æ—Å–∏—Ç—å –æ—Å—Ç–∞—Ç–æ–∫":
            kb = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚úÖ –î–∞, —Å–±—Ä–æ—Å–∏—Ç—å", callback_data="reset_calories")],
                [InlineKeyboardButton(text="‚ùå –ù–µ—Ç", callback_data="cancel_reset")],
            ])
            await message.answer("–í—ã —Ç–æ—á–Ω–æ —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ–±–Ω—É–ª–∏—Ç—å –æ—Å—Ç–∞—Ç–æ–∫ –∫–∞–ª–æ—Ä–∏–π –Ω–∞ —Å–µ–≥–æ–¥–Ω—è?", reply_markup=kb)
        elif text == "‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –ª–∏–º–∏—Ç":
            await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ª–∏–º–∏—Ç –∫–∞–ª–æ—Ä–∏–π –Ω–∞ –¥–µ–Ω—å:", reply_markup=ReplyKeyboardRemove())
            dp.fsm_state = "set_limit"
        elif text == "üìä –ò—Å—Ç–æ—Ä–∏—è":
            hist = await calories.get_history(user_id, 7)
            msg = "–ò—Å—Ç–æ—Ä–∏—è –∑–∞ 7 –¥–Ω–µ–π:\n"
            for d, lim, left in reversed(hist):
                used = lim - left
                msg += f"{d}: {used}/{lim} –∫–∫–∞–ª\n"
            await message.answer(msg)
        elif text == "‚ûñ –í—ã–ø–∏–ª –≤–æ–¥—ã":
            await message.answer("–°–∫–æ–ª—å–∫–æ –º–ª –≤–æ–¥—ã –≤—ã–ø–∏—Ç–æ? –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ:", reply_markup=ReplyKeyboardRemove())
            dp.fsm_state = "subtract_water"
        elif text == "üîÑ –°–±—Ä–æ—Å–∏—Ç—å –≤–æ–¥—É":
            kb = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚úÖ –î–∞, —Å–±—Ä–æ—Å–∏—Ç—å", callback_data="reset_water")],
                [InlineKeyboardButton(text="‚ùå –ù–µ—Ç", callback_data="cancel_reset_water")],
            ])
            await message.answer("–í—ã —Ç–æ—á–Ω–æ —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ–±–Ω—É–ª–∏—Ç—å –æ—Å—Ç–∞—Ç–æ–∫ –≤–æ–¥—ã –Ω–∞ —Å–µ–≥–æ–¥–Ω—è?", reply_markup=kb)
        elif text == "‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –ª–∏–º–∏—Ç –≤–æ–¥—ã":
            await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ª–∏–º–∏—Ç –≤–æ–¥—ã –Ω–∞ –¥–µ–Ω—å (–≤ –º–ª):", reply_markup=ReplyKeyboardRemove())
            dp.fsm_state = "set_water_limit"
        elif text == "üìä –ò—Å—Ç–æ—Ä–∏—è –≤–æ–¥—ã":
            hist = await water.get_history(user_id, 7)
            msg = "–ò—Å—Ç–æ—Ä–∏—è –≤–æ–¥—ã –∑–∞ 7 –¥–Ω–µ–π:\n"
            for d, lim, left in reversed(hist):
                used = lim - left
                msg += f"{d}: {used}/{lim} –º–ª\n"
            await message.answer(msg)
        elif text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å —à–∞–≥–∏":
            await message.answer("–°–∫–æ–ª—å–∫–æ —à–∞–≥–æ–≤ –¥–æ–±–∞–≤–∏—Ç—å? –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ:", reply_markup=ReplyKeyboardRemove())
            dp.fsm_state = "add_steps"
        elif text == "üèãÔ∏è‚Äç‚ôÇÔ∏è –û—Ç–º–µ—Ç–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É":
            await activity.add_workout(user_id)
            await message.answer("–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –æ—Ç–º–µ—á–µ–Ω–∞! üí™", reply_markup=activity_menu)
        elif text == "üîÑ –°–±—Ä–æ—Å–∏—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å":
            kb = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚úÖ –î–∞, —Å–±—Ä–æ—Å–∏—Ç—å", callback_data="reset_activity")],
                [InlineKeyboardButton(text="‚ùå –ù–µ—Ç", callback_data="cancel_reset_activity")],
            ])
            await message.answer("–í—ã —Ç–æ—á–Ω–æ —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–±—Ä–æ—Å–∏—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∑–∞ —Å–µ–≥–æ–¥–Ω—è?", reply_markup=kb)
        elif text == "ÔøΩÔøΩ –ò—Å—Ç–æ—Ä–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏":
            hist = await activity.get_history(user_id, 7)
            msg = "–ò—Å—Ç–æ—Ä–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∑–∞ 7 –¥–Ω–µ–π:\n"
            for d, steps, workout in reversed(hist):
                w = "‚úÖ" if workout else "‚ùå"
                msg += f"{d}: {steps} —à–∞–≥–æ–≤, —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞: {w}\n"
            await message.answer(msg)
        elif text == "‚ûï –í–≤–µ—Å—Ç–∏ –≤–µ—Å":
            await message.answer("–í–≤–µ–¥–∏ —Å–≤–æ–π –≤–µ—Å (–∫–≥):", reply_markup=ReplyKeyboardRemove())
            dp.fsm_state = "add_weight"
        elif text == "üîÑ –°–±—Ä–æ—Å–∏—Ç—å –≤–µ—Å":
            kb = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚úÖ –î–∞, —Å–±—Ä–æ—Å–∏—Ç—å", callback_data="reset_weight")],
                [InlineKeyboardButton(text="‚ùå –ù–µ—Ç", callback_data="cancel_reset_weight")],
            ])
            await message.answer("–¢—ã —Ç–æ—á–Ω–æ —Ö–æ—á–µ—à—å —É–¥–∞–ª–∏—Ç—å –≤–µ—Å –∑–∞ —Å–µ–≥–æ–¥–Ω—è?", reply_markup=kb)
        elif text == "üìä –ò—Å—Ç–æ—Ä–∏—è –≤–µ—Å–∞":
            hist = await weight.get_history(user_id, 14)
            msg = "–ò—Å—Ç–æ—Ä–∏—è –≤–µ—Å–∞ –∑–∞ 2 –Ω–µ–¥–µ–ª–∏:\n"
            for d, v in reversed(hist):
                msg += f"{d}: {v} –∫–≥\n"
            await message.answer(msg)
        elif text == "üìù –ó–∞–ø–∏—Å–∞—Ç—å –ø–ª–∞–Ω":
            await message.answer("–ù–∞–ø–∏—à–∏ —Å–≤–æ–π –ø–ª–∞–Ω:", reply_markup=ReplyKeyboardRemove())
            dp.fsm_state = "add_plan"
        elif text == "üí≠ –ó–∞–ø–∏—Å–∞—Ç—å –º—ã—Å–ª—å":
            await message.answer("–ó–∞–ø–∏—à–∏ —Å–≤–æ—é –º—ã—Å–ª—å:", reply_markup=ReplyKeyboardRemove())
            dp.fsm_state = "add_thought"
        elif text == "üìã –°–µ–≥–æ–¥–Ω—è—à–Ω–∏–µ –∑–∞–ø–∏—Å–∏":
            today_notes = await notes.get_today_notes(user_id)
            if today_notes:
                msg = "–ó–∞–ø–∏—Å–∏ –∑–∞ —Å–µ–≥–æ–¥–Ω—è:\n\n"
                for type_, content in today_notes:
                    emoji = "üìù" if type_ == "plan" else "üí≠"
                    msg += f"{emoji} {content}\n"
            else:
                msg = "–ù–∞ —Å–µ–≥–æ–¥–Ω—è –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π."
            await message.answer(msg, reply_markup=notes_menu)
        elif text == "üìö –ò—Å—Ç–æ—Ä–∏—è –∑–∞–ø–∏—Å–µ–π":
            hist = await notes.get_history(user_id, 7)
            if hist:
                msg = "–ò—Å—Ç–æ—Ä–∏—è –∑–∞–ø–∏—Å–µ–π –∑–∞ –Ω–µ–¥–µ–ª—é:\n\n"
                current_date = None
                for date, type_, content in hist:
                    if date != current_date:
                        current_date = date
                        msg += f"\nüìÖ {date}:\n"
                    emoji = "üìù" if type_ == "plan" else "üí≠"
                    msg += f"{emoji} {content}\n"
            else:
                msg = "–ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞."
            await message.answer(msg)
        elif text == "‚ùì –ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã":
            faq_list = await get_faq_list()
            kb = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text=q, callback_data=f"faq_{id}")] for id, q, _ in faq_list
            ])
            await message.answer("–í—ã–±–µ—Ä–∏ –≤–æ–ø—Ä–æ—Å:", reply_markup=kb)
        elif text == "‚úçÔ∏è –ó–∞–¥–∞—Ç—å —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å":
            await message.answer("–ù–∞–ø–∏—à–∏ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å —Ç—Ä–µ–Ω–µ—Ä—É:", reply_markup=ReplyKeyboardRemove())
            dp.fsm_state = "ask_question"
        elif text == "‚¨ÖÔ∏è –í –º–µ–Ω—é":
            await message.answer("–í—ã–±–µ—Ä–∏ —Ä–∞–∑–¥–µ–ª:", reply_markup=main_menu)
        elif dp.fsm_state == "subtract_calories":
            try:
                amount = int(text)
                await calories.add_calories(user_id, amount)
                today = await calories.get_today(user_id)
                await message.answer(
                    f"‚úÖ –í—ã—á—Ç–µ–Ω–æ {amount} –∫–∫–∞–ª\n\n–û—Å—Ç–∞–ª–æ—Å—å: {today['left']} –∫–∫–∞–ª",
                    reply_markup=calories_menu
                )
                dp.fsm_state = None
            except ValueError:
                await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ:")
        elif dp.fsm_state == "set_limit":
            try:
                limit = int(text)
                await calories.set_limit(user_id, limit)
                await message.answer(
                    f"‚úÖ –õ–∏–º–∏—Ç –∫–∞–ª–æ—Ä–∏–π —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {limit} –∫–∫–∞–ª",
                    reply_markup=calories_menu
                )
                dp.fsm_state = None
            except ValueError:
                await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ:")
        elif dp.fsm_state == "subtract_water":
            try:
                amount = int(text)
                await water.add_water(user_id, amount)
                today = await water.get_today(user_id)
                await message.answer(
                    f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ {amount} –º–ª –≤–æ–¥—ã\n\n–û—Å—Ç–∞–ª–æ—Å—å: {today['left']} –º–ª",
                    reply_markup=water_menu
                )
                dp.fsm_state = None
            except ValueError:
                await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ:")
        elif dp.fsm_state == "set_water_limit":
            try:
                limit = int(text)
                await water.set_limit(user_id, limit)
                await message.answer(
                    f"‚úÖ –õ–∏–º–∏—Ç –≤–æ–¥—ã —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {limit} –º–ª",
                    reply_markup=water_menu
                )
                dp.fsm_state = None
            except ValueError:
                await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ:")
        elif dp.fsm_state == "add_steps":
            try:
                steps = int(text)
                await activity.add_steps(user_id, steps)
                today = await activity.get_today(user_id)
                await message.answer(
                    f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ {steps} —à–∞–≥–æ–≤\n\n–í—Å–µ–≥–æ: {today['steps']} —à–∞–≥–æ–≤",
                    reply_markup=activity_menu
                )
                dp.fsm_state = None
            except ValueError:
                await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ:")
        elif dp.fsm_state == "add_weight":
            try:
                weight_value = float(text)
                await weight.add_weight(user_id, weight_value)
                await message.answer(
                    f"‚úÖ –í–µ—Å {weight_value} –∫–≥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω",
                    reply_markup=weight_menu
                )
                dp.fsm_state = None
            except ValueError:
                await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ:")
        elif dp.fsm_state == "add_plan":
            await notes.add_note(user_id, "plan", text)
            await message.answer(
                "‚úÖ –ü–ª–∞–Ω —Å–æ—Ö—Ä–∞–Ω–µ–Ω",
                reply_markup=notes_menu
            )
            dp.fsm_state = None
        elif dp.fsm_state == "add_thought":
            await notes.add_note(user_id, "thought", text)
            await message.answer(
                "‚úÖ –ú—ã—Å–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞",
                reply_markup=notes_menu
            )
            dp.fsm_state = None
        elif dp.fsm_state == "ask_question":
            await add_user_question(user_id, text)
            answer = await get_coach_answer(text)
            await message.answer(
                f"–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–æ–ø—Ä–æ—Å! –í–æ—Ç –º–æ–π –æ—Ç–≤–µ—Ç:\n\n{answer}",
                reply_markup=faq_menu
            )
            dp.fsm_state = None
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_menu: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@dp.callback_query()
async def handle_callback(call: types.CallbackQuery):
    try:
        user_id = call.from_user.id
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É: {call.data}")
        
        if call.data == "reset_calories":
            await calories.reset_calories(user_id)
            await call.message.answer("‚úÖ –û—Å—Ç–∞—Ç–æ–∫ –∫–∞–ª–æ—Ä–∏–π —Å–±—Ä–æ—à–µ–Ω", reply_markup=calories_menu)
        elif call.data == "cancel_reset":
            await call.message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=calories_menu)
        elif call.data == "reset_water":
            await water.reset_water(user_id)
            await call.message.answer("‚úÖ –û—Å—Ç–∞—Ç–æ–∫ –≤–æ–¥—ã —Å–±—Ä–æ—à–µ–Ω", reply_markup=water_menu)
        elif call.data == "cancel_reset_water":
            await call.message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=water_menu)
        elif call.data == "reset_activity":
            await activity.reset_activity(user_id)
            await call.message.answer("‚úÖ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Å–±—Ä–æ—à–µ–Ω–∞", reply_markup=activity_menu)
        elif call.data == "cancel_reset_activity":
            await call.message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=activity_menu)
        elif call.data == "reset_weight":
            await weight.reset_weight(user_id)
            await call.message.answer("‚úÖ –í–µ—Å —Å–±—Ä–æ—à–µ–Ω", reply_markup=weight_menu)
        elif call.data == "cancel_reset_weight":
            await call.message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=weight_menu)
        elif call.data.startswith("faq_"):
            faq_id = int(call.data[4:])
            question, answer = await get_faq_answer(faq_id)
            await call.message.answer(
                f"‚ùì {question}\n\n{answer}",
                reply_markup=faq_menu
            )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_callback: {e}")
        await call.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def main():
    try:
        logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
        await dp.start_polling(bot)
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)

if __name__ == "__main__":
    asyncio.run(main()) 